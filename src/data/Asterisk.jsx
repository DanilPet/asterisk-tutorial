export const slides = [
    {
        id: 0,
        title: <>Лекция 1 <br></br> IP-телефония</>,
        titleS: "Лекция 1  IP-телефония"
    },    

    {
        id: 1,
        title: <>Лекция 2 <br></br> Программная IP АТС Asterisk</>,
        titleS: "Лекция 2 Программная IP АТС Asterisk"
    },

    {
        id: 2,
        title: <>Лекция 3 <br></br> Конфигурационные файлы Asterisk </>,
        titleS: "Лекция 3 Конфигурационные файлы Asterisk" 
    },

    {
        id: 3,
        title: <>Лекция 4 <br></br> Диалплан</>,
        titleS: "Лекция 4  Диалплан"
    },
    
    {
        id: 4,
        title: <>Лекция 5 <br></br> Протоколы, используемые на АТС Asterisk</>,
        titleS: "Лекция 5  Протоколы, используемые на АТС Asterisk"
    },

    {
        id: 5,
        title: <>Лекция 6 <br></br> Интерактивное голосовое меню IVR</>,
        titleS: "Лекция 6  Интерактивное голосовое меню IVR"
    },

    {
        id: 6,
        title: <>Лекция 7 <br></br> Интерфейс FreePBX</>,
        titleS: "Лекция 7 Интерфейс FreePBX"
    },
]

export const lections = [
    {
        id: 0,
        slideId: 0,
        
        modules: [
            {
                id: 0,
                type: "lection",
                title: "Понятие IP-телефонии",
                content: <>
                    
                    <p>IP-телефония - телефонная связь по протоколу IP. Под IP-телефонией подразумевается набор коммуникационных протоколов, технологий и методов, обеспечивающих традиционные для телефонии набор номера, дозвон и двустороннее голосовое общение, а также видеообщение по сети Интернет или любым другим IP-сетям. </p>
                    <p> Сигнал по каналу связи передаётся в цифровом виде и, как правило, перед передачей преобразовывается (сжимается), чтобы удалить избыточность информации и снизить нагрузку на сеть передачи данных.</p>
                   
                    <p>К преимуществам IP-телефонии можно отнести:</p>
                    <ul>
                        <li>масштабируемость;</li>
                        <li>цена;</li>
                        <li>функциональность (голосовое приветствие, очередь и переадресация звонков, запись и хранение, голосовая почта и др.);</li>
                        <li>мобильность;</li>
                        <li>легкость и простота добавления дополнительных телефонных линий;</li>
                        <li>простота оплаты услуг IP-телефонии;</li>
                        <li> возможность автоматической настройки набора услуг.</li>
                    </ul>
                    <p>К недостаткам:</p>
                    <ul>
                        <li>меньшая надежность по сравнению с коммутируемым аналоговым каналом (зависит от наличия доступа к сети Интернет);</li>
                        <li>возможна большая задержка доставки пакетов;</li>
                        <li>зависимость от наличия компьютерной сети и стабильности электроэнергии.</li>
                    </ul>

                </>,
                img: ["lections/ip-tel.png.jpg" ],
                imgTitle: "Структура IP телефонии" 
    
            },
    
            {
                id: 1,
                type: "lection",
                title: "История создания (1973-1996)",
                content: <>
                    <p>История современной IP-телефонии началась еще в 1973 году, когда осуществили первую трансляцию голосового сигнала с помощью протокола NVP (Network Voice Protocol). Технологию разработали для сети Apranet – раннего прообраза Интернета.</p>
                    <p>В 1991 году программист Джон Уокер представил программу NetFone для внутрикорпоративной связи (позже ее переименовали в платформу Speak-Freely, она стала первым в истории VoIP-телефоном). Еще через два года появилась система видеоконференцсвязи TeleSuite.</p>
                    <p> Первый интернет-телефон для широкого пользования создала фирма VocalTec в 1995 году. Вскоре возможности InternetPhone объединились с платформой видеоконференцсвязи Microsoft NetMeeting.</p>
                    <p>  С 1996 года началась работа над созданием SIP-протокола. После многих модификаций он был приведен к стандарту RFC 3261 с индивидуальными идентификаторами, открытостью, масштабируемостью.</p>
                    
                </>,
                img: ["lections/firstIp.png"],
                imgTitle: "Первый IP-телефон VocalTec Community Browser"  
    
            },
    
            {
                id: 2,
                type: "lection",
                title: "История создания (1998-2006)",
                content: <>
                    <p>  С 1998 года IP-телефония интегрируется в традиционные телефонные сети, но доля разговоров по интернету остается незначительной. Только в 2003 г. случился резкий подъем популярности IP-телефонии. Доля VoIP-звонков достигла 25% телефонного трафика. Пользователи оценили низкие цены переговоров и бесплатную локальную связь.</p>
                    <p>Первую виртуальную автоматическую телефонную станцию (ВАТС) для VoIP-телефонии представили в 1999 г. Это была Asterisk, созданная инженером Марком Спенсером для колл-центра Digium.</p>
                    <p> В 2003 году свою бета-версию запускает Skype и сразу получает огромное внимание всех категорий пользователей. Он был выкуплен eBay за $2,6 млрд, а после Microsoft за $8,5 млрд</p>
                    <p>  С 2005 года на рынок вышел первый сотовый телефон C1250i от компании Calypso Wireless, способный переключаться с GSM на Wi-Fi.</p>
                    <p>В 2006 году вышло первое мобильное приложение для IP-телефонии Truphone. Изначально приложение было разработано для мобильных телефонов Nokia, но вскоре было выпущено для платформ iPhone, Android и BlackBerry.</p>
                    
                </>,
                img: ["lections/calypso.jpg"],
                imgTitle: "Calypso wireless C1250i "   

    
            },
    
            {
                id: 3,
                type: "lection",
                title: "Виды IP-телефонии",
                content: <>
                     <p>На различных объектах связи, IP-телефония различается по способам реализации голосовой связи через IP-сеть. В этом плане можно выделить следующие виды: </p>
                    <ul>
                        <li>голосовая связь типа «компьютер-компьютер»;</li>
                        <li>сценарий «компьютер-телефон»;</li>
                        <li>соединение по типу «телефон-телефон»;</li>
                        <li>организация звонков «WEB-телефон».</li>
                    </ul>
                    <p>Телефонная связь по принципу «компьютер-компьютер» - требует 2 компьютера, оборудованные звуковыми картами и средствами ввода-вывода звуковой информации и подключенные к ЛВС (локальной вычислительной сети) предприятия и/или глобальной сети Интернет. Согласно данному сценарию, аналоговый голосовой сигнал поступает с микрофона абонента в кодирующее устройство, формируется в пакет цифровых данных и передается адресату через IP-сеть. Соответственно, при приеме данные подвергаются обратному преобразованию в аналоговый голосовой сигнал и попадают в динамик компьютера Вашего удаленного собеседника.</p>
                    <p> В случае связи по принципу «компьютер-телефон» необходимо иметь с одной стороны компьютер, также снабженный звуковой картой и системой ввода-вывода звука, и специальный телефонный IP-шлюз, а с другой – обычный телефон, расположенный в любой точке мира. </p>
                    <p> «телефон-телефон» и вовсе не подразумевают установки какого-либо специализированного оборудования: только обычный IP-телефон, в качестве телефонной линии здесь используется частная IP-сеть либо Интернет.</p>
                    <p>«WEB-телефон» –услуга, предоставляемая провайдерами IP-телефонии, представляет собой звонок с веб-сайта. Это позволяет пользователям сети Интернет напрямую связываться, к примеру, со службой техподдержки, торговым представителем и т. д.</p>
                </>,
                
    
            },
    
            {
                id: 4,
                type: "lection",
                title: "Уровни модели OSI и архитектуры Интернет",
                content: <>
                    <p>На рисунке изображены модели OSI слева и модель DARPA правее, а также соответствие протоколов TCP/IP к ним.</p>
                    <p>Первый уровень модели DARPA – уровень сетевого интерфейса – поддерживает физический процесс переноса информации между устройствами в сети, т. е. объединяет функции двух уровней OSI – физический и канальный. </p>
            
                    <p>Второй уровень, межсетевой интерфейс обеспечивает физическое соединение со средой передачи, обеспечивает разрешение конфликтов, возникающих в процессе организации доступа к среде, упаковывает данные в пакеты.</p>
                    <p>
                    Сетевой уровень отвечает за передачу информации, упакованной в дейтаграммы (datagram), от одного компьютера к другому. Дейтаграмма - это протокольная единица, которой оперируют протоколы семейства TCP/IP. Она содержит адресную информацию, необходимую для переноса дейтаграммы через сеть, а не только в рамках одного звена данных. Основным протоколом, реализующим функции сетевого уровня, является протокол IP. Этот протокол отвечает за маршрутизацию, фрагментацию и сборку дейтаграмм в рабочей станции.
                    </p>
                    <p> Транспортный уровень обеспечивает надежную передачу информации от источника к приемнику.</p>
                    <p>Конечные пользователи взаимодействуют с компьютером на прикладном уровне.</p>
                   
                   
                    
                </>,
                img: ["lections/OSI.png"],
                imgTitle: "Уровни модели OSI"   
    
            },
        ]
        

               

    
    
    },

    {
        id: 1,
        slideId: 1,
        modules: [
            {
                id: 0,
                type: "lection",
                title: "Введение",
                content: <>
                    <p>Asterisk - это платформа конвергентной телефонии с открытым исходным кодом, предназначенная в первую очередь для работы на Linux. Ни одна другая управленческая автоматизированная телефонная станция (УАТС) не может быть так просто развернута.</p>
                    <p>Такие приложения, как голосовая почта, конференции, очереди вызовов и агенты, музыка на удержании и парковка вызовов - все это стандартные функции, встроенные прямо в программное обеспечение. Кроме того, Asterisk может интегрироваться с другими бизнес-технологиями. </p>
                    <p>К преимуществам Asterisk можно отнести нулевую стоимость приобретения ПО и развитую функциональность.
                    К недостаткам - сложность администрирования, сложность в изучении.</p>
                    
                </>,
                img: ["asterisk.png"],
                imgTitle: "Логотип Asterisk"   
    
            },
    
            {
                id: 1,
                type: "lection",
                title: "Различия между архитектурами Asterisk и УАТС",
                content: <>
                    <p>В традиционной АТС существует логическое различие между абонентскими линиями (телефонными аппаратами) и транками (линия межстанционной связи). Это ограничение делает маршрутизацию в традиционных УАТС очень сложной или невозможной.</p>
                    <p>В Asterisk все, что входит или выходит из системы, проходит через диалплан. Существует множество различных типов соединений с конечным оборудованием: соединительная линия или транк (при этом они могут быть как аналоговыми, так и цифровыми VoIP или ISDN-PRI), однако диалплан Asterisk обрабатывает все каналы одинаково, не важно соединительный транк или обычная абонентская линия.</p>
                </>,
                img: ["lections/architecture-asterisk.png"],
                imgTitle: "Различие между архитектурой Asterisk и УАТС"    
    
            },

            {
                id: 2,
                type: "lection",
                title: "Модули Asterisk",
                content: <>
                    <p>Asterisk построен на модулях. Модуль — это загружаемый компонент (драйвер) какого-либо типа канала, например: SIP, H.323, SCCP(разработан и используется компанией CISCO для её линейки оборудования), DAHDI — (Digium/Asterisk Hardware Device Interface) — технология, обеспечивающая поддержку различного оборудования (в основном плат расширения) в системах VoIP-телефонии. DAHDI разрабатывается компанией Digium (ныне Sagoma) и является частью проекта Asterisk. Модули Asterisk загружаются на основе параметров, определенных в файле /etc/asterisk/modules.conf.</p>
                    <p>На самом деле можно запустить Asterisk вообще без каких-либо модулей, хотя в этом состоянии он ничего не сможет сделать. Это бывает полезно для понимания модульной природы Asterisk для оценки архитектуры.</p>
                    <p>Типы модулей в Asterisk включают в себя следующие:</p>
                    <ul>
                        <li>модули приложения – рабочие лошадки диалплана, такие как Dial(), Voicemail(), Playback(), Queue() и т.д, используются для определения различных действий, применимых к вызову;</li>
                        <li>модули соединения – механизмы, которые соединяют каналы (вызовы) друг с другом;</li>
                        <li>модули записи деталей вызовов (CDR) – предназначены для обеспечения как можно большего числа методов хранения записей сведений о вызовах;</li>
                        <li>модули регистрации событий канала (CEL) – обеспечивает гораздо более мощный контроль над отчетами об активности вызовов. Кроме того, он требует более тщательного планирования плана набора и ни в коем случае не будет работать автоматически;</li>
                        <li>драйверы каналов — различные соединения с системой и из системы; SIP (Session Initiation Protocol) использует канальный драйвер PJSIP;</li>
                        <li>трансляторы кодеков — преобразовывают различные кодеки, такие как G729, G711, G722, Speex и так далее;</li>
                        <li>интерпретаторы форматов — как указано выше, но относящиеся к файлам, хранящимся в файловой системе;</li>
                        <li>функции диалплана — расширенные возможности диалплана;</li>
                        <li>модули УАТС;</li>
                        <li>модули ресурсов;</li>
                        <li>дополнительные модули – разработанные сообществом модули с правами на использование или распространение, отличными от основного кода;</li>
                        <li>тестовые модули – используются для проверки нового кода.</li>
                    </ul>
                </>,
    
            },
    
            
        ]      

    
    },

    {
        id: 2,
        slideId: 2,
        modules: [
            {
                id: 0,
                type: "lection",
                title: "Файл Sip.conf",
                content: <>
                    <p>Астериск, как любое приложение, работает на основании конфигурационных файлов, которых достаточно большое множество. Для работы на начальном этапе понадобится знать и понимать настройки, хранящиеся в файлах sip.conf и extensions.conf. При стандартной установке все файлы конфигов хранятся в /etc/asterisk/.</p>
                    <p>Файл sip.conf содержит описание базовых параметров работы протокола SIP, настройки NAT, кодеков и самое главное — учетных записей. </p>
                    <p>Учетные записи в sip.conf могут быть трех типов:</p>
                    <ul>
                        <li>peer (пир)</li>
                        <li>user (пользователь)</li>
                        <li>friend (пользователь+пир)</li>
                    </ul>   
                    <p>Peer может использоваться для совершения исходящих вызовов (например, SIP провайдер), а также для входящих вызовов, если необходимо сопоставить эту запись не с именем пользователя из поля FROM, а с IP адресом, указанным для этой записи.</p>
                    <p>Для входящих вызовов записи данного типа никогда не будет проверяться соответствие имени пользователя и пароля, а только с IP адресом и номером порта источника вызова. </p>
                    <p>User - Это SIP запись, через которую вызовы могут поступать из вне в Asterisk (телефон, который может только совершать вызовы).</p>
                    <p>Friend - запись, которая одновременно и user и peer. Этот тип наиболее подходит для телефонов и других устройств. Для SIP пользователей этого типа Asterisk* создаст два объекта, один типа peer и один типа user, с одинаковыми именами.</p>
                    </>,
    
            },
    
            {
                id: 1,
                type: "lection",
                title: "extensions.conf",
                content: <>
                    <p>Данный файл — ключевой файл в системе Asterisk, так как в нем описываются правила работы с любым голосовым трафиком, появившимся в системе. Это как статическая таблица маршрутизации.</p>
                    <p>Структура файла вполне проста:</p>
                    <ul>
                        <li>внутри файла прописываются глобальные параметры, в том числе и переменные;</li>
                        <li>далее файл разбит на независимые контексты, правила работы звонков внутри каждого контекста могут быть своими</li>
                    </ul>
                    <p>Подробнее об extensions рассказывается в лекции по диалплану </p>
                </>,
    
            },         
            
            {
                id: 2,
                type: "lection",
                title: "Список всех файлов конфигурации",
                content: <>
                    <p>Ниже перечислен список всех файлов конфигурации Asterisk</p>
                    <ul>                        
                        <li>Asterisk:acl.conf - Access Control List - Списки контроля доступа. Используется для создания списков ip адресов или подсетей, для разрешения или запрещения SIP регистраций.</li>
                        <li>Asterisk: agents.conf - Конфигурация агентов очередей Asterisk.</li>
                        <li>alarmreceiver.conf - Настройка модуля взаимодействия с охранными системами по протоколу Ademco.</li>
                        <li>asterisk:alsa.conf - Модуль захвата аудио с внутренней звуковой карты.</li>
                        <li>Asterisk:amd.conf - Настройка приложения для распознавания автоотвечиков на линии.</li>
                        <li>Asterisk: app_mysql.conf - Дополнительный свойства соединения с mysql.</li>
                        <li>Asterisk:app_skel.conf - Вспомогательный модуль для отладки новых приложений Asterisk. Для разработчиков.</li>
                        <li>Asterisk: ari.conf - Интерфейс RESTful Asterisk.</li>
                        <li>asterisk.conf - Общие (глобальные) настройки Asterisk</li>
                        <li>Asterisk:calendar.conf - Взаимодействие с серверами календарей.</li>
                        <li>ccss.conf - Служба отложенного вызова.</li>
                        <li>Asterisk: cdr.conf - Детализированный отчет о звонках - CDR.</li>
                        <li>cdr_adaptive_odbc.conf - Позволяет изменять имена полей CDR, на нужные вам имена переменных.</li>
                        <li>Asterisk:cdr_custom.conf - Преобразование полей CDR в csv логе.</li>
                        <li>cdr_manager.conf - CDR на основе событий AMI.</li>
                        <li> Asterisk: cdr_mysql.conf - Параметры соединения с БД MySQL, для сохранения данных CDR.</li>
                        <li>cdr_odbc.conf - Параметры ODBC соединений, для сохранения данных CDR.</li>
                        <li>cdr_pgsql.conf - Параметры соединения с СУБД PostgreSQL, для сохранения данных CDR.</li>
                        <li>cdr_sqlite3_custom.conf - Настройка полей CDR в БД Sqlite3</li>
                        <li>cdr_syslog.conf - Модуль cdr_syslog сохраняет CDR, при помощи системного журнала (журналирование)</li>
                        <li>Asterisk: cdr_tds.conf - FreeTDS библиотека Linux, позволяющая соединяться с Sybase ASE и Microsoft SQL
Structured Query Language
 Server.</li>
                        <li>cel.conf - Channel Event Logging - Лог событий канала. В отличии от CDR, сохраняет все события имевшие место в канале.</li>
                        <li>cel_custom.conf - Сохранение данных Channel Event Logging в csv файл.</li>
                        <li>cel_odbc.conf - Сохранение данных Channel Event Logging через ODBC  Open Database Connectivity драйвер.</li>
                        <li>cel_pgsql.conf - Сохранение данных Channel Event Logging в СуБД PostgreSQL.</li>
                        <li>cel_sqlite3_custom.conf - Настройка полей CEL в БД Sqlite3</li>
                        <li>cel_tds.conf - Соединение с Microsoft SQL Server при помощи библиотеки FreeTDS.</li>
                        <li>chan_dahdi.conf - Настройки драйвера канала DAHDI</li>
                        <li>chan_mobile.conf - Настройки модуля связи bluetooth. Позволяет использовать мобильный телефон, как канал связи.</li>
                        <li>cli.conf - Настройки консоли Asterisk.</li>
                        <li>cli_aliases.conf - Псевдонимы команд консоли Asterisk</li>
                        <li>cli_permissions.conf - Разрешение/Запрет выполнения команд консоли Asterisk, для пользователей Linux.</li>
                        <li>codecs.conf - Настройки кодеков.</li>
                        <li>Asterisk: confbridge.conf - Настройка модуля телеконференций в Asterisk.</li>
                        <li>console.conf - Используйте вход/выход звуковой карты, как устройство связи Asterisk.</li>
                        <li>dbsep.conf - Реализация realtime архитектуры при помощи cURL и CGI скрипта (dpseb.cgi - распространяется с исходными файлами Asterisk)</li>
                        <li>dnsmgr.conf - Настройки DNS-запросов.</li>
                        <li>dsp.conf - Настройки модуля DSP.</li>
                        <li>dundi.conf - Распределённое универсальное распознавание номеров</li>
                        <li>enum.conf -ENUM служба сопоставления телефонных номеров адресам в интернете.</li>
                        <li>Asterisk Realtime: extconfig.conf - Настройки RealTime архитектуры и статической конфигурации в БД.</li>
                        <li>extensions.ael - План набора (dialplan) на Asterisk Extensions Language (AEL)</li>
                        <li>extensions.conf - Dialplan - План набора (dialplan) Asterisk - pbx_config</li>
                        <li>extensions.lua - План набора (dialplan) Asterisk на LUA.</li>
                        <li>extensions_minivm.conf - План набора для minivm.</li>
                        <li>Asterisk коды абонентских функций - features.conf - Конфигурация пользовательских кодов Asterisk.</li>
                        <li>festival.conf - Синтез речи.</li>
                        <li>Asterisk: followme.conf - Настройки модуля Следуй за Мной.</li>
                        <li>Asterisk func_odbc - Функции ODBC.</li>
                        <li>h323.conf - Настройки одной из двух реализаций протокола h323 в Asterisk.</li>
                        <li>http.conf - Встроенный http сервер Asterisk.</li>
                        <li>Asterisk: iax.conf - Inter Asterisk Exchange - собственный VoIP протокол в Asterisk.</li>
                        <li>indications.conf - Национализация тональных сигналов.</li>
                        <li>Asterisk logger.conf - Настройка логов Asterisk.</li>
                        <li>manager.conf - Настройка интерфейса AMI (Asterisk Manager Interface)</li>
                        <li>meetme.conf - Устаревшая система телеконференций Asterisk.</li>
                        <li>minivm.conf - Упрощенная система голосовой почты, как дополнение app_voicemail.c</li>
                        <li>modules.conf - Параметры загрузки модулей Asterisk.</li>
                        <li>Asterisk: MOH - Настройка Музыки на Удержании (MOH
Music On Hold
)</li>
                        <li>ooh323.conf - Еще одна реализация протокола h323.</li>
                        <li>pjsip.conf - PJSIP драйвер Asterisk. Вторая и более полная реализация драйвера SIP в Asterisk.</li>
                        <li>Asterisk queuerules.conf - Правила динамического изменения пенальти пользователей очереди.</li>
                        <li>Asterisk настройка очереди - queues.conf - Настройка очередей входящих вызовов.</li>
                        <li>res_config_mysql.conf - Параметры соединения с БД MySQL.</li>
                        <li>res_config_sqlite.conf - Параметры соединения с БД Sqlite</li>
                        <li>res_config_sqlite3.conf - Параметры соединения с БД Sqlite3</li>
                        <li>res_corosync.conf - Общие (share) состояния устройств для кластера серверов Asterisk при помощи движка corosync.</li>
                        <li>res_curl.conf - Чтение/Запись данных Asterisk на удаленный http сервер через cURL (Realtime, Events, etc).</li>
                        <li>res_fax.conf - Прием и отправка виртуальных факсов Asterisk.</li>
                        <li>res_ldap.conf - Параметры соединения с LDAP.</li>
                        <li>Asterisk: res_odbc.conf - Параметры соединения ODBC.</li>
                        <li>res_parking.conf - Парковка вызовов.</li>
                        <li>res_pgsql.conf - Параметры соединения PostgreSQL.</li>
                        <li>Asterisk res_pjsip_acl - Списки контроля доступа ACL для PJSIP драйвера.</li>
                        <li>res_pktccops.conf</li>
                        <li>
res_snmp.conf - Параметры соединения протокола сетевого управления SNMP.</li>
                        <li>
rtp.conf - Глобальные настройки RTP - медиа портов и протокола.</li>
                        <li>sip.conf - Настройки sip драйвера chan_sip</li>
                    </ul>
                </>,
    
            },
    
            
        ]      

    
    },

    

    {
        id: 3,
        slideId: 3,
        modules: [
            {
                id: 0,
                type: "lection",
                title: "Понятие диалплана",
                content: <>
                    <p>Диалплан – формальное описание схемы маршрутизации и обработки телефонных звонков, определяет, как Asterisk обрабатывает входящие и исходящие вызовы. По сути, он состоит из списка инструкций или шагов, которым будет следовать Asterisk. В отличие от традиционных систем телефонной связи, диалплан Asterisk является полностью настраиваемым. Чтобы добиться успеха в построении собственной АТС на основе Asterisk, необходимо понять концепцию диалплана.                     
                    </p>
                    <p>Диалплан Asterisk определен в конфигурационном файле extensions.conf.</p>
                    <p>Файл extensions.conf обычно расположен в директории /etc/asterisk, но его расположение может быть совершенно различным в зависимости от того, как инсталлирован Asterisk. </p>          

                </>
    
            },
    
            {
                id: 1,
                type: "lection",
                title: "Иерархия диалплана",
                content: <>
                    <p>Диалплан состоит из четырех основных элементов: контекстов, добавочных номеров, приоритетов и приложений, как показано на рисунке слева.</p>
                    <p>Контексты – это секции, на которые разбит диалплан. Контексты содержат различные части диалплана, сообщающиеся между собой. Логика обработки вызова, описанная в одном контексте полностью изолирована от логики в других контекстах, кроме разрешённых специфических соединений.</p>
                    <p>Контекст определяется именем/названием, которое помещается в квадратные скобки. Имя может содержать буквы от A до Z (большие и маленькие), цифры от 0 до 9, дефис и подчёркивание. Контекст для входящих вызовов может быть записан таким образом: [incoming].</p>
                    <p>Все инструкции, расположенные под названием контекста, являются частью этого контекста, пока ниже этого не будет определено название следующего. </p>
                    <p>В начале диалплана определены два специальных контекста: [general] и [globals]. Первый — [general] содержит список общих установок диалплана (о которых, возможно, вам вообще не придётся беспокоиться).</p>
                    <p>С помощью заголовка [Globals] можно определить глобальные переменные и их начальные значения</p>
                    <p>Когда определяется канал (что не делается в файле extensions.conf, но для этого используются такие файлы, как sip.conf, iax.conf, chan_dahdi.conf, и тд), одним из обязательных параметров в каждом определении канала является context.</p>
                    
                   
                </>,
                img: ["lections/four.png"],
                imgTitle: "Иерархия диалплана"  
    
            },
    
            {
                id: 2,
                type: "lection",
                title: "Связь между файлами конфигурации канала и контекстами",
                content: <>
                    <p>На рисунке слева показана связь между файлами конфигурации канала и контекстами в диалплане.</p>
                    <p>Добавочный номер (extension) – обычно обозначает числовой идентификатор, который присвоен линии, идущей к конкретному телефону. Однако в Asterisk это намного более широкое понятие, поскольку оно определяет уникальные последовательности шагов (каждый шаг включает приложение или команду), которые Asterisk будет применять к вызову по этой линии. </p>
                    <p>В каждом контексте может быть задано столько добавочных номеров, сколько требуется. При вызове конкретного добавочного номера (входящим или внутренним звонком) Asterisk будет выполнять шаги, определенные для этого добавочного номера. Поэтому именно добавочные номера определяют, что происходит со звонками при их обработке соответственно диалплану. Хотя, конечно, добавочные номера могут использоваться в их традиционном значении, но в диалплане Asterisk они могут означать намного большее.</p>
                    <p>Синтаксис добавочного номера – это слово exten, за которым следует стрелка, образованная знаками равенства и «больше чем»: «exten {"=>"}».</p>
                    <p>В Asterisk имена расширений могут быть любыми комбинациями цифр и букв. </p>
                    <p>Каждый шаг расширения состоит из трех компонентов:</p>
                    <ul>
                        <li>имя (или номер) расширения;</li>
                        <li>приоритет;</li>
                        <li>приложение (или команда), которое будет выполняться на этом шаге.</li>
                    </ul>
                    <p>Эти три компонента разделены запятыми как в данном случае: «exten {"=>"}  123,1,Answer()».</p>
                    <p>Имя расширения – 123, приоритет – 1, а приложение -Answer().</p>
                    <p>Каждое приложение выполняет определённое действие в текущем канале, такое как — воспроизведение звука, приём набора сигналов DTMF, поиск чего-то в базе данных, выполнение вызова в канал, завершение вызова. В предыдущем примере показаны два простых приложения: Answer() и Hangup(). Очевидно, что они делают, но также очевидно, что сами по себе они не очень полезны. </p>
                    <p>Некоторые приложения, включая Answer() и Hangup() не требуют дополнительных инструкций для выполнения своей задачи. Но большинству приложений требуется дополнительная информация. Эти дополнительные элементы или аргументы передаются в приложения чтобы повлиять на выполнение действий. </p>
                </>,
                img: ["lections/dialplan-hierarchy.png"],
                imgTitle: "Cвязь между файлами конфигурации канала и контекстами в диалплане"  
    
            },

            {
                id: 3,
                type: "lection",
                title: "Популярные приложения диалплана",
                content: <>
                    <p style={{display: "block", textAlign: "center", margin: 0 + " " + "auto"}}>В таблице снизу представлен список популярных приложений диалплана </p>
                        
                    <p style={{display: "block", margin: 0 + " " + "auto"}}><img style={{maxWidth: 100 + "%", display: "block"}} src = "lections/extensions.png"></img></p>
                     
                </>,
             
    
            },
    
               
        ]      

    
    },


    {
        id: 4,
        slideId: 4,
        modules: [
            {
                id: 0,
                type: "lection",
                title: "Протокол SIP",
                content: <>
                   <p>SIP – протокол установления сеанса – это технология, позволяющая абонентам телефонной сети разговаривать друг с другом, обмениваться мультимедийной информацией, осуществлять видео-звонки, отправлять сообщения. </p>
                   <p>Передача информации производится при помощи IP (Internet Protocol).</p>
                   <p>SIP работает совместно с другими прикладными протоколами:</p>

                   <ul>
                        <li>SDP (Session Description Protocol) – для обмена данными;</li>
                        <li>RTP (Real-time Transport Protocol) – для обеспечения голосовой связи;</li>
                        <li>TLS (Transport Layer Security) – для шифрования передаваемых данных.</li>       
                    </ul>
                   <p>Поддержка протокола SIP позволяет выполнять следующие задачи:</p>

                   <ul>
                        <li>передача голосовой информации;</li>
                        <li>отправка и прием мультимедийных данных;</li>
                        <li>организация конференц-связи;</li>
                        <li>удержание вызова.</li>       
                    </ul>

                   <p>Преимущества SIP:</p>

                   <ul>
                        <li>стоимость установки и подключения оборудования ниже, чем для реализации аналоговой АТС;</li>
                        <li>пользователи получают в распоряжение многоканальный телефонный номер, который никогда не бывает занят (при достаточной численности персонала);</li>
                        <li>количество абонентов можно увеличить без существенных затрат;</li>
                        <li>установка и настройка оборудования выполняется быстро и легко;</li>
                        <li>тариф не зависит от локации абонентов. Это делает выгодным использование телефонии в организациях, имеющих филиалы в разных регионах. Ограничения по географическому положению абонентов отсутствуют.</li>
                    </ul>

                    <p>Для пользователей системы доступны следующие способы совершения звонков:</p>
                    <ul>
                        <li>посредством компьютера или ноутбука. Для этого необходимо установить софт, подключить гарнитуру;</li>
                        <li>с помощью смартфона или планшета через 3G/LTE. Для работы требуется установка приложения;</li>
                        <li>с использованием стационарного СИП-телефона. Аппарат подключается к роутеру;</li>
                        <li>при помощи обычного телефонного аппарата, поддерживающего такую возможность. В этом случае требуется подключить телефон к VoIP-шлюзу, а шлюз – к роутеру.</li>                         
                    </ul>
                    <p>Последовательность работы системы следующая:</p>
                    <ul>
                        <li>при поступлении голосового звонка SIP-приложение сжимает голос и преобразует аналоговый сигнал в цифровые пакеты, что позволяет сохранить качество звука и уменьшить нагрузку на сеть;</li>
                        <li>сигнал передается в принимающее устройство (ПК, смартфон, телефонный аппарат и т.д.);</li>
                        <li>устройства коммутируются между собой при помощи IP-адресов для начала сеанса связи;</li>
                        <li>цифровой пакеты преобразуется в аналоговый сигнал, благодаря чему пользователи могут слышать голоса друг друга.</li>                         
                    </ul>
                    <p>Аналогичным образом осуществляется передача мультимедийной информации.</p>
                    <p>В структурную схему SIP-сети входит:</p>
                    <ul>
                        <li>терминал – конечный узел SIP-сессии для ее управления или передачи сообщения. Является одновременно и клиентом, и сервером;</li>
                        <li>регистратор – узел SIP-сети. Находит и регистрирует терминалы, хранит о них данные;</li>
                        <li>прокси-сервер – промежуточный элемент SIP-сети. Обеспечивает передачу сообщений между терминалами с помощью маршрутизации;</li>
                        <li>сервер перенаправления – дополнительный элемент, который перенаправляет запросы между прокси-серверами и внешними доменами.</li>                                     
                    </ul>
                    





                </>,
                img: ["lections/sip.png"],
                imgTitle: "Структурная схема SIP сети"
    
            },

            {
                id: 1,
                type: "lection",
                title: "Запросы и ответы SIP",
                content: <>
                   <p>В первоначальной версии протокола SIP (в RFC 3261) было определено шесть типов запросов. С помощью запросов клиент сообщает о текущем местоположении, приглашает пользователей принять участие в сеансах связи, модифицирует уже установленные сеансы, завершает их и т. д. Тип запроса указывается в стартовой строке.</p>
                   <p>Существуют следующие типы запросов для протокола SIP</p>
                   
                   <ul>
                        <li>INVITE — приглашает пользователя к сеансу связи. Обычно содержит SDP-описание сеанса;</li>
                        <li>ACK — подтверждает приём ответа на запрос INVITE;</li>
                        <li>TRYING — сообщает о том, что запрос обрабатывается;</li>
                        <li>RINGING — сообщает о том, что у вызываемого пользователя зазвонил телефон;</li>
                        <li>OK — высылается, когда вызываемый пользователь поднимает трубку, а также в ответ на запрос BYE;</li>
                        <li>BYE — завершает сеанс связи. Может быть передан любой из сторон, участвующих в сеансе;</li>
                        <li>CANCEL — отменяет обработку ранее переданных запросов, но не влияет на запросы, которые уже закончили обрабатываться;</li>
                        <li>REGISTER — переносит адресную информацию для регистрации пользователя на сервере определения местоположения;</li>
                        <li>OPTIONS — запрашивает информацию о функциональных возможностях сервера.</li>
                   </ul>

                   <p>В дальнейшем протокол был расширен, в него добавили ещё несколько типов запросов:</p>

                   <ul>
                        <li>PRACK — временное подтверждение</li>
                        <li>SUBSCRIBE — подписка на получение уведомлений о событии </li>
                        <li>NOTIFY — уведомление подписчика о событии </li>
                        <li>PUBLISH — публикация события на сервере</li>
                        <li>INFO — передача информации, которая не изменяет состояние сессии </li>
                        <li>REFER — запрос получателя о передаче запроса SIP </li>
                        <li>MESSAGE — передача мгновенных сообщений средствами SIP </li>
                        <li>UPDATE — модификация состояния сессии без изменения состояния диалога </li>
                       
                   </ul>

                   <p>Ответы на запросы сообщают о результате обработки запроса либо передают запрошенную информацию. Структуру ответов и их виды протокол SIP унаследовал от протокола HTTP. Определено шесть типов ответов, несущих разную функциональную нагрузку. Тип ответа кодируется трёхзначным числом, самой важной является первая цифра, которая определяет класс ответа:</p>

                   <ul>
                        <li>1ХХ — информационные ответы; показывают, что запрос находится в стадии обработки. Наиболее распространённые ответы данного типа — 100 Trying, 180 Ringing, 183 Session Progress.</li>
                        <li>2ХХ — финальные ответы, означающие, что запрос был успешно обработан. В настоящее время в данном типе определены только два ответа — 200 OK и 202 Accepted</li>
                        <li>3ХХ — финальные ответы, информирующие оборудование вызывающего пользователя о новом местоположении вызываемого пользователя, например, ответ 302 Moved Temporary.</li>
                        <li>4ХХ — финальные ответы, информирующие об отклонении или ошибке при обработке или выполнении запроса, например, 403 Forbidden или классический для протокола HTTP ответ 404 Not Found. Другие примеры: 406 Not Acceptable — неприемлемый (по содержанию) запрос, 486 Busy Here — абонент занят или 487 Request Terminated — вызывающий пользователь разорвал соединение не дожидаясь ответа (отмена запроса).</li>
                        <li>5ХХ — финальные ответы, информирующие о том, что запрос не может быть обработан из-за отказа сервера, 500 Server Internal Error.</li>
                        <li>6ХХ — финальные ответы, информирующие о том, что соединение с вызываемым пользователем установить невозможно, например, ответ 603 Decline означает, что вызываемый пользователь отклонил входящий вызов.</li>                       
                       
                   </ul>
                   
                </>,
               
    
            },

            {
                id: 2,
                type: "task",
                title: "Практическая задача №1 по теме: 'Запросы и ответы SIP. Заполнить схему сеанса связи между двумя телефонами без сервера'",
                variables:  [
                    {id: 0, img: "tasks/sipPhones-ack.png", number: 4 },
                    {id: 1, img: "tasks/sipPhones-bye.png", number: 6 },
                    {id: 2, img: "tasks/sipPhones-invite.png", number: 0 },
                    {id: 3, img: "tasks/sipPhones-ok.png", number: 2 },    
                    {id: 4, img: "tasks/sipPhones-okR.png", number: 5 },
                    {id: 5, img: "tasks/sipPhones-ringing.png", number: 3 },
                    {id: 6, img: "tasks/sipPhones-voice.png", number: 1 },
                ],
                questions: [
                    {id:0, img:"tasks/sipPhonesQ.png", answers: [
                        {id: 1, img: "", fact: 4, styled: {top: 62 + "%", left: 8 + "%", border: 3 + "px" + " dashed " + "#423a3a", width: 500 + "px", height: 33 + "px",  }, number: null, idA: null },
                        {id: 2, img: "", fact: 6, styled: {top: 83 + "%", left: 8 + "%", border: 3 + "px" + " dashed " + "#423a3a", width: 500 + "px", height: 33 + "px" }, number: null, idA: null },
                        {id: 3, img: "", fact: 0, styled: {top: 31 + "%", left: 8 + "%", border: 3 + "px" + " dashed " + "#423a3a", width: 500 + "px", height: 33 + "px",  }, number: null, idA: null },
                        {id: 4, img: "", fact: 2, styled: {top: 51 + "%", left: 8 + "%", border: 3 + "px" + " dashed " + "#423a3a", width: 500 + "px", height: 33 + "px",  }, number: null, idA: null },
                        {id: 5, img: "", fact: 5, styled: {top: 92 + "%", left: 8 + "%", border: 3 + "px" + " dashed " + "#423a3a", width: 500 + "px", height: 33 + "px",  }, number: null, idA: null },
                        {id: 6, img: "", fact: 3, styled: {top: 40 + "%", left: 8 + "%", border: 3 + "px" + " dashed " + "#423a3a", width: 500 + "px", height: 33 + "px", }, number: null, idA: null },
                        {id: 7, img: "", fact: 1, styled: {top: 73 + "%", left: 8 + "%", border: 3 + "px" + " dashed " + "#423a3a", width: 500 + "px", height: 33 + "px", }, number: null, idA: null },
                    ]}
                ],
               
    
            },

            {
                id: 3,
                type: "task",
                title: "Практическая задача №2 по теме: 'Запросы и ответы SIP. Заполнить схему сеанса связи между двумя телефонами с сервером'",
                variables:  [
                    {id: 0, img: "tasks/sipPhones-ack.png", number: 4},
                    {id: 1, img: "tasks/sipPhones2-ok.png", number: 3 },
                    {id: 2, img: "tasks/sipPhones-invite.png", number: 0 },
                    {id: 3, img: "tasks/sipPhones2-trying.png", number: 1 },    
                    {id: 4, img: "tasks/sipPhones2-ringing.png", number: 2 },
                    {id: 5, img: "tasks/sipPhones-ack.png", number: 4 },
                    {id: 6, img: "tasks/sipPhones-media.png", number: 5 },
                    {id: 7, img: "tasks/sipPhones-invite.png", number: 0 },
                    {id: 8, img: "tasks/sipPhones-media.png", number: 5 },
                    {id: 9, img: "tasks/sipPhones-byeR.png", number: 6 },
                    {id: 10, img: "tasks/sipPhones2-trying.png", number: 1 },    
                    {id: 11, img: "tasks/sipPhones2-ok.png", number: 3 },
                    {id: 12, img: "tasks/sipPhones-byeR.png", number: 6 },
                    {id: 13, img: "tasks/sipPhones2-ringing.png", number: 2 },
                    {id: 14, img: "tasks/sipPhones2-ok.png", number: 3 },
                    {id: 15, img: "tasks/sipPhones2-ok.png", number: 3 },
                ],
                questions: [
                    {id:0, img:"tasks/sipPhonesQ2.png", answers: [
                        {id: 1, img: "", fact: 4, styled: {top: 71 + "%", left: 6 + "%", border: 3 + "px" + " dashed " + "#423a3a", width: 285 + "px", height: 33 + "px",  }, number: null, idA: null },
                        {id: 2, img: "", fact: 3, styled: {top: 61 + "%", left: 47 + "%", border: 3 + "px" + " dashed " + "#423a3a", width: 285 + "px", height: 33 + "px" }, number: null, idA: null },
                        {id: 3, img: "", fact: 0, styled: {top: 34 + "%", left: 6 + "%", border: 3 + "px" + " dashed " + "#423a3a", width: 285 + "px", height: 33 + "px",  }, number: null, idA: null },
                        {id: 4, img: "", fact: 1, styled: {top: 43 + "%", left: 6 + "%", border: 3 + "px" + " dashed " + "#423a3a", width: 285 + "px", height: 33 + "px",  }, number: null, idA: null },
                        {id: 5, img: "", fact: 2, styled: {top: 60 + "%", left: 6 + "%", border: 3 + "px" + " dashed " + "#423a3a", width: 285 + "px", height: 33 + "px",  }, number: null, idA: null },
                        {id: 6, img: "", fact: 4, styled: {top: 67 + "%", left: 47 + "%", border: 3 + "px" + " dashed " + "#423a3a", width: 285 + "px", height: 33 + "px", }, number: null, idA: null },
                        {id: 7, img: "", fact: 5, styled: {top: 77 + "%", left: 6 + "%", border: 3 + "px" + " dashed " + "#423a3a", width: 285 + "px", height: 33 + "px", }, number: null, idA: null },
                        {id: 8, img: "", fact: 0, styled: {top: 36 + "%", left: 47 + "%", border: 3 + "px" + " dashed " + "#423a3a", width: 285 + "px", height: 33 + "px",  }, number: null, idA: null },
                        {id: 9, img: "", fact: 5, styled: {top: 77 + "%", left: 47 + "%", border: 3 + "px" + " dashed " + "#423a3a", width: 285 + "px", height: 33 + "px" }, number: null, idA: null },
                        {id: 10, img: "", fact: 6, styled: {top: 83 + "%", left: 6 + "%", border: 3 + "px" + " dashed " + "#423a3a", width: 285 + "px", height: 33 + "px",  }, number: null, idA: null },
                        {id: 11, img: "", fact: 1, styled: {top: 47 + "%", left: 47 + "%", border: 3 + "px" + " dashed " + "#423a3a", width: 285 + "px", height: 33 + "px",  }, number: null, idA: null },
                        {id: 12, img: "", fact: 3, styled: {top: 65 + "%", left: 6 + "%", border: 3 + "px" + " dashed " + "#423a3a", width: 285 + "px", height: 33 + "px",  }, number: null, idA: null },
                        {id: 13, img: "", fact: 6, styled: {top: 87 + "%", left: 47 + "%", border: 3 + "px" + " dashed " + "#423a3a", width: 285 + "px", height: 33 + "px", }, number: null, idA: null },
                        {id: 14, img: "", fact: 2, styled: {top: 55 + "%", left: 47 + "%", border: 3 + "px" + " dashed " + "#423a3a", width: 285 + "px", height: 33 + "px", }, number: null, idA: null },
                        {id: 15, img: "", fact: 3, styled: {top: 89 + "%", left: 6 + "%", border: 3 + "px" + " dashed " + "#423a3a", width: 285 + "px", height: 33 + "px", }, number: null, idA: null },
                        {id: 16, img: "", fact: 3, styled: {top: 93 + "%", left:47 + "%", border: 3 + "px" + " dashed " + "#423a3a", width: 285 + "px", height: 33 + "px", }, number: null, idA: null },
                    ]}
                ],
               
    
            },
    
            {
                id: 4,
                type: "lection",
                title: "Протокол IAX",
                content: <>
                   <p>Протокол IAX/IAX2 (протокол для транковых каналов)— протокол обмена VoIP данными между АТС, либо их узлами. Разработан компанией Digium, так как существующий на тот момент протокол SIP не удовлетворял полностью все потребности разработчиков и интеграторов Asterisk.</p>
                   <p>Особенности и преимущества протокола:</p>
                   <ul>
                        <li>IAX/IAX2 — это не группа стандартов, а совместная разработка сообщества пользователей, телефонистов и разработчиков (Примечание: IAX2 описан в стандарте RFC 5456);</li>
                        <li>IAX2 использует лишь один UDP-порт 4569 и, благодаря этому, хорошо обрабатывается устройствами NAT (устаревший протокол IAX1 использовал порт 5036).Использование одного порта для установки соединения и передачи данных означает, что при звонке вы всегда будете слышать голос собеседника, если есть возможность установить управляющее соединение;</li>
                        <li>IAX2 поддерживает аутентификацию и транкинг по сертификатам;</li>
                        <li> драйвер Asterisk для IAX2 имеет буфер джиттера, что позволяет повысить качество связи и сократить число ошибок при передаче данных.</li>                         
                    </ul>
                    <p>Основной недостаток IAX/IAX2 — это небольшое количество вызовов, которые могут быть переданы по одному каналу связи (около 300-400 вызовов).</p>
                   
                </>,
    
            },
    
            {
                id: 5,
                type: "lection",
                title: "Протокол H-323",
                content: <>
                    <p>Система протоколов H.323 является системой передачи мультимедийной информации в реальном времени. Предназначенная для сетей, использующих пакетную передачу данных, система включает в себя стек следующих протоколов: H.225.0 — для сигнализации о соединении; Q.931 — для управления соединениями; H.245 — для согласования параметров; RTP – для передачи данных в режиме реального времени; H.450.x – для обеспечения дополнительных функций, таких как переадресация вызовов и т.п.</p>
                    <p>H.323 подразумевает для своей работы наличие следующих составляющих элементов сети: терминалов, многоточечных блоков управления (MCU), шлюзов и гейткиперов. </p>
                    <p>Терминал — это основное устройство в системе H.323, обеспечивающее передачу видео- и аудио данных. Терминал обязательно должен поддерживать все протоколы, входящие в стек H.323, для обеспечения сервисов IP телефонии. Выполняется как в виде простого IP телефона, так и в виде сложного устройства с дополнительными функциями. </p>
                    <p>Шлюз - присутствует только тогда, когда необходимо обеспечить сопряжение сети H.323 с сетью другого типа, например ISDN (Integrated Services Digital Network) или PSTN (Public Switched Telephone Network). </p>
                    <p>Привратник является опциональным элементом сети H.323. В число функций привратника входят: регистрация терминалов, управление полосой пропускания, трансляция адреса, аутентификация пользователей.</p>
                    <p>Устройство управления конференциями – это сервер, в функции которого входит поддержание аудио и видеоконференций между тремя или более H.323 терминалами. </p>
                    <p>Сервер управляет ресурсами конференции, определяет аудио и видеопотоки, проводит согласование терминалов по возможности обработки аудио- и видеоданных.</p>
                    <p>Наличие всех рассмотренных устройств, кроме терминалов, является опциональным. Таким образом, простейшей архитектурой сети H.323 могут являться два, напрямую подключенных терминала, поддерживающих соответствующий стек протоколов, изображенный на рисунке слева</p>
                    <p>Наличие шлюзов не является обязательным для функционирования системы. Совокупность конечных точек, управляемых одним гейткипером называется зоной. </p>
                </>,
                img: ["lections/h323-stack.png"],
                imgTitle: "Стек протоколов h.323" 
    
            },
    
           
        ]      

    
    },

    {
        id: 5,
        slideId: 5,
        modules: [
            {
                id: 0,
                type: "lection",
                title: "Определение",
                content: <>
                    <>
                    <p>Интерактивное голосовое меню (IVR) позволяет реализовать маршрутизация вызовов без участия человека (секретаря или оператора), то есть принять входные данные от абонента, выполнить действие, основанное на этих входных данных. Традиционно системы IVR были сложными, дорогими и раздражающими в реализации.</p>
                    <p>К преищуществам IVR можно отнести:</p>
                    <ul>
                        <li>Лучшее обслуживание клиентов</li>
                        <p>Решения IVR предоставляют возможности самообслуживания, чтобы клиенты могли самостоятельно решать распространенные проблемы. Они также собирают необходимые данные и эффективно распределяют звонки, что увеличивает количество разрешений проблем при первом обращении. Кроме того, фильтрация и сегментация звонков сокращают время ожидания и помогают предоставлять эффективное обслуживание в любом масштабе.</p>
                        <li>Снижение эксплуатационных расходов</li>
                        <p>Системы IVR сокращают расходы, уменьшая рабочую нагрузку агентов по обслуживанию клиентов. Можно использовать системы IVR для продления срока обслуживания в нерабочее время, например ночью, в праздничные или выходные дни, без дополнительных затрат.</p>
                        <li>Улучшение безопасности</li>
                        <p>Усовершенствованные системы IVR определяют и подтверждают личность клиентов, что обеспечивает дополнительные меры безопасности для конфиденциальных случаев использования. Они ограничивают доступ к конфиденциальным данным до тех пор, пока личность клиента не будет подтверждена.</p>
                        <li>Улучшение аналитики</li>
                    </ul>
                    
                    <p></p>


                    
                    </>

                </>,
                img: ["lections/ivr-system.jpg"],
                imgTitle: "Схема работы IVR"
    
            },
    
            {
                id: 1,
                type: "lection",
                title: "Принцип работы IVR",
                content: <>
                   <p>Самые основные элементы IVR очень похожи на элементы автосекретаря, хотя цель и отличается. Нам нужно по крайней мере одно приветствие чтобы сообщить вызывающему, что ожидает IVR, метод получения входных данных от вызывающего, алгоритм проверки допустимости ответа вызывающего абонента, логику определения следующего шага IVR, и, наконец, механизм хранения ответов, если это применимо. </p>
                   <p>С точки зрения вызывающего абонента, каждый IVR должен начинаться с подсказки (голосового приветствия). Этот приветствие будет сообщать абоненту что он попал на IVR и попросит собеседника ввести начальные данные.</p>
                   <p>Как только входные данные получены – сразу идет их проверка. </p>
                   <p>Если данные не корректны, то в IVR предусмотрена реакция на такие события (сброс соединения или повторное приглашение на ввод данных).
                    Хорошо спроектированный IVR (как и любая программа) будет пытаться предвидеть все возможные входные данные и предоставлять механизмы для их обработки.
</p>
                   <p>После проверки входных данных можно отправить их на внешний ресурс для обработки. Это может быть сделано с помощью запроса в базу данных, отправки в URI, программы AGI или многих других вещей. Это внешнее приложение должно выдать результат, который можно передать обратно абоненту. Это может быть подробный результат такой как: «Баланс вашего счета...» или простое подтверждение такое как «ваш счет был обновлен». </p>
                   <p>Иногда IVR может иметь несколько шагов, и поэтому результат может включать запрос дополнительной информации от вызывающего абонента для перехода к следующему шагу приложения IVR. </p>
                </>,
    
            },
    
          
    
           
        ]      

    
    },

    {
        id: 6,
        slideId: 6,
        modules: [
            {
                id: 0,
                type: "lection",
                title: "введение FreePBX",
                content: <>
                    <p>FreePBX – это полнофункциональный графический интерфейс, который используется для управления Asterisk, являющегося одним из наиболее распространенных решений для офисной телефонии. Уже в базовой конфигурации этот дистрибутив с открытым кодом дает возможность пользоваться функциями, которые подойдут практически любой компаниям.</p>
                    <p>Преимущества FreePBX</p>
                    <ul>
                        <li>удобство конфигурирования;</li>
                        <li>поддерживает почти все функции Asterisk;</li>
                        <li>удобный интерфейс;</li>
                        <li>быстрая реализация сложных функций.</li>
                    </ul>
                    <p>К недостаткам можно отнести:</p>
                    <ul>
                        <li>диалплан, местами кажущийся совсем неоптимальным;</li>
                        <li>сложная логика работы;</li>
                        <li>нет технической поддержки от производителя.</li>
                    </ul>
                </>,
                img: ["freePBX.png"],
                imgTitle: "Логотип FreePBX" 
    
            },

            {
                id: 1,
                type: "lection",
                title: "Dashboard",
                content: <>
                    <p>В данный модуль "администратор АТС" пользователь попадает сразу после прохождения процедуры
                    авторизации, и здесь можно найти следующую информацию:</p>
                    <ul>
                        <li>Количество одновременных вызовов;</li>
                        <li>Количество активных транков;</li>
                        <li>Использование центрального процессора/жёсткого диска/сетевых ресурсов; </li>
                        <li>Статус Asterisk/Apache/MySQL/SSH серверов;</li>
                        <li>Статус основных компонент АТС;</li>
                    </ul>
                    <p>Общий вид данного модуля можно увидеть на первом скриншоте ниже:</p>
                    <img src="lections/dashboard1.png"></img>
                    <p>На следующем рисунке представлен раздел данного модуля: FreePBX Statistics:</p>
                    <img src="lections/dashboard2.png"></img>

                    <p>На графиках изображена по умолчанию статистика по зарегистрированным телефонам,
                    транкам и активным звонкам. В данном случае – два транка онлайн, один
                    зарегистрированный экстеншен, и ноль активных вызовов. </p>
                    <p>Следующий раздел System Overview представлен на рисунке ниже</p>
                    <img src="lections/dashboard3.png"></img>
                    <p>Это также очень важный раздел – здесь демонстрируется статус ключевых подсистем – сам
                    Asterisk, MySQL, Apache (Web Server) и так далее. Кроме того, под надписью «Show New»
                    находятся уведомления: </p>
                    <ul>
                        <li>количество модулей, доступных для обновления; </li>
                        <li>«неподписанные» модули (которые теоретически могут являть собой уязвимость) ;</li>
                        <li>ошибки модулей ;</li>
                        <li>ошибки в маршрутизации (например, очередей - Queues) ;</li>
                        
                    </ul>
                    <p>И многие другие. Кроме того – сразу виден номер версии FreePBX.</p>
                </>,
    
            },

            {
                id: 2,
                type: "lection",
                title: "Extensions (внутренние номера)",
                content: <>
                    <p>Для перехода в данный раздел в меню сверху следует нажать на вкладку Applications (приложения) и в выпавшем списке выбрать модуль Extensions (внутренние номера)</p>
                    <p>В результате пользователя перенесёт на страницу, представленную на скриншоте ниже</p>
                    <img src="lections/Extensions1.png"></img>
                    <p>Данный модуль позволяет легко и быстро создавать внутренние номера.</p>
                    <p>Для добавления внутреннего номера нужно нажать на кнопку Add Extensions, после чего на самую верхнюю вкладку из выпавшего списка, после чего вы перейдете на следующую страницу как на скриншоте ниже</p>
                    <img src="lections/Extensions2.png"></img>
                    <p>Поля, которые требуется заполнить:</p>
                    <ul>
                        <li>User Extension - расширенный номер, который нужно набрать, чтобы связаться с этим пользователем.</li>
                        <li>Display Name - имя CallerID для звонков от этого пользователя будет установлено на это имя. Введите только имя, например user101.</li>
                        <li>Исходящий Caller ID (Outbound CID) - также ввести имя как и в форме выше</li>
                        <li>Секрет - это пароль внутреннего номера </li>                       
                        
                    </ul>
                </>,
    
            },

            {
                id: 3,
                type: "lection",
                title: "Backup & restore (Резервное копирование и восстановление)",
                content: <>
                    <p>Для перехода в данный раздел в меню сверху следует нажать на вкладку Admin (Администратор) и в выпавшем списке выбрать модуль Backup & restore (Резервное копирование и восстановление)</p>
                    <p>В результате пользователя перенесёт на страницу, представленную на скриншоте ниже</p>
                    <img src="lections/Backup1.png"></img>
                    <p>Как и следует из названия модуля, он нужнен для резервного копирования данных.</p>
                    <p>Для создания резервной копии следует нажать на Add Backup, в результате вы перейдете на страницу как на скриншоте ниже</p>
                    <img src="lections/Backup2.png"></img>
                    <p>Поля, которые требуется заполнить:</p>
                    <ul>
                        <li>Backup Name</li>
                        <li>Backup Description </li>
                        <li>Произвести выбор места хранения в разделе storage Location</li>
                        <li>произвести настройку вкладок «Storage» и «Schedule and Maintinence» и нажать save </li>                        
                    </ul>
                    <p>После возврата на страницу backup & restore, в таблице снизу появится новая запись с вашим бэкапом, нужно будет в столбце Actions нажать на треугольник</p>
                </>,
    
            },

            {
                id: 4,
                type: "lection",
                title: "Queues (очереди)",
                content: <>
                    <p>Для перехода в данный раздел в меню сверху следует нажать на вкладку Applications (приложения) и в выпавшем списке выбрать модуль Queues (очереди) </p>
                    <p>В результате пользователя перенесёт на страницу, представленную на скриншоте ниже</p>
                    <img src="lections/Queues1.png"></img>
                    <p>Данный модуль требуется для создания очередей.</p>
                    <p>Основными состовляющими очередей являются:</p>
                    <ul>
                        <li>Входящие (Callers) - входящие звонки,направляемые в очередь;
</li>
                        <li> Агенты (Agents) - операторы, которые отвечают на звонки из очереди; </li>
                        <li>Статика (Static) –настройка, при которой Агент не может покинуть очередь,
будучи залогиненым;</li>
                        <li>Динамика (Dynamic) - настройка, при которой Агент может входить и выходить
из очереди самостоятельно;
 </li>                       
                        <li>Музыка на удержании (MoH) - музыка или объявление, которое будет
проигрываться в трубке у ожидающих в очереди абонентов;</li>  
                        <li>Оповещения (Announcements) - голосовое оповещение, которое проигрывается в
трубке у членов очереди (Агентов или ожидающих абонентов). Например,
периодически, ожидающий абонент будет слышать, сколько минут ему осталось
ждать: “Оператор ответит Вам через 5/4/3/2 минут”</li>                       
                    </ul>
                    <p>Для создания очередей следует нажать на Add Queue (В результате перейдете на страницу как на рисунке ниже)</p>
                    <img src="lections/Queues2.png"></img>
                    <p>Для создания очередей требуется заполнить все имеющиеся формы и добавить агентов во вкладке queue Agents</p>
                    
                </>,
    
            },


           
        ]      

    
    },


    
    
]